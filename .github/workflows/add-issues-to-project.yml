name: Add Issues to Project and Notify Members

on:
  issues:
    types:
      - opened
      - reopened
jobs:
  add-to-project:
    name: Add issue to project
    runs-on: ubuntu-latest
    steps:
      - name: Calculate Due Date
        id: calculate_due_date
        uses: actions/github-script@v6
        with:
          script: |
            const createdAt = new Date(context.payload.issue.created_at);
            const dueDate = new Date(createdAt);
            dueDate.setDate(createdAt.getDate() + 14);
            const year = dueDate.getFullYear();
            const month = String(dueDate.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed
            const day = String(dueDate.getDate()).padStart(2, '0');
            const formattedDueDate = `${year}-${month}-${day}`;
            core.setOutput("due_date", formattedDueDate);
      - name: Add to NSpace ERC Project
        id: add_issue_to_project_step # Added ID for referencing output (itemId)
        uses: actions/add-to-project@v0.5.0 # Use the latest version
        with:
          project-url: "https://github.com/orgs/NSpaceTeam/projects/4"
          github-token: ${{ secrets.NSPACE_PROJECT_AUTOMATION }} # PAT with project scope
      - name: Set Project Fields from Labels and Due Date
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.NSPACE_PROJECT_AUTOMATION }}
          script: |
            const core = require('@actions/core');
            const github = require('@actions/github');

            const itemId = "${{ steps.add_issue_to_project_step.outputs.itemId }}";
            const projectId = "${{ steps.add_issue_to_project_step.outputs.projectId }}";
            const issueLabels = github.context.payload.issue.labels.map(label => label.name.toLowerCase());
            const dueDate = "${{ steps.calculate_due_date.outputs.due_date }}";

            core.info(`Project ID: ${projectId}`);
            core.info(`Item ID: ${itemId}`);
            core.info(`Issue Labels: ${issueLabels.join(', ')}`);
            core.info(`Due Date: ${dueDate}`);

            if (!projectId || !itemId) {
              core.setFailed("Project ID or Item ID is missing. Ensure 'add_issue_to_project_step' ran successfully and outputted them.");
              return;
            }

            const fieldNodeIds = {
              priority: "PVTSSF_lAHOB_NSpaceTeam4zgB190903138A",
              module: "PVTSSF_lAHOB_NSpaceTeam4zgB190903623A",
              challenge: "PVTSSF_lAHOB_NSpaceTeam4zgB190903832A",
              dueDate: "PVTSSF_lAHOB_NSpaceTeam4zgB190903996A"
              // Size/Effort: "PVTSSF_lAHOB_NSpaceTeam4zgB190903964A" // Not used as no labels map to it yet
            };

            // !!! IMPORTANT: User needs to replace these placeholder Option IDs with actual GraphQL Node IDs !!!
            // How to find Option IDs:
            // 1. Go to your project settings on GitHub.
            // 2. Inspect the network requests when changing a single-select field's value, or
            // 3. Use GitHub GraphQL API Explorer or `gh api graphql` to query the project's fields and their options:
            //    query {
            //      node(id: "YOUR_PROJECT_NODE_ID") { # Replace YOUR_PROJECT_NODE_ID with the value of `projectId` from logs
            //        ... on ProjectV2 {
            //          fields(first: 20) {
            //            nodes {
            //              ... on ProjectV2SingleSelectField {
            //                id
            //                name
            //                options {
            //                  id # This is the Option ID you need
            //                  name
            //                }
            //              }
            //            }
            //          }
            //        }
            //      }
            //    }
            const optionNodeIds = {
              priority: {
                "low": "OPTION_ID_FOR_LOW_PRIORITY",        // e.g., PVTSSO_............................
                "medium": "OPTION_ID_FOR_MEDIUM_PRIORITY",  // e.g., PVTSSO_............................
                "high": "OPTION_ID_FOR_HIGH_PRIORITY"       // e.g., PVTSSO_............................
              },
              module: {
                "ai-ml": "OPTION_ID_FOR_AI_ML_MODULE",
                "control-systems": "OPTION_ID_FOR_CONTROL_SYSTEMS_MODULE",
                "embedded": "OPTION_ID_FOR_EMBEDDED_MODULE",
                "navigation": "OPTION_ID_FOR_NAVIGATION_MODULE",
                "perception": "OPTION_ID_FOR_PERCEPTION_MODULE",
                "simulation": "OPTION_ID_FOR_SIMULATION_MODULE",
                "airlock": "OPTION_ID_FOR_AIRLOCK_MODULE",
                "equipment-panel": "OPTION_ID_FOR_EQUIPMENT_PANEL_MODULE",
                "documentation": "OPTION_ID_FOR_DOCUMENTATION_MODULE"
              },
              challenge: {
                "Overall Project": "OPTION_ID_FOR_OVERALL_PROJECT_CHALLENGE",
                "Connectivity Test": "OPTION_ID_FOR_CONNECTIVITY_TEST_CHALLENGE",
                "Payload Test": "OPTION_ID_FOR_PAYLOAD_TEST_CHALLENGE",
                "Challenge 1": "OPTION_ID_FOR_CHALLENGE_1",
                "Challenge 2": "OPTION_ID_FOR_CHALLENGE_2"
              }
            };

            async function updateProjectV2ItemField(input) {
              const { projectId, itemId, fieldId, value, fieldName } = input;
              core.info(`Attempting to update item '${itemId}', field '${fieldName}' (${fieldId}) in project '${projectId}' with value ${JSON.stringify(value)}`);
              try {
                await github.graphql(
                  `mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: $value
                    }) {
                      projectV2Item { id }
                    }
                  }`,
                  { projectId, itemId, fieldId, value }
                );
                core.info(`Successfully updated field '${fieldName}' (${fieldId}) for item '${itemId}'.`);
              } catch (error) {
                core.error(`Error updating field '${fieldName}' (${fieldId}) for item '${itemId}': ${error.message}`);
                core.error(`Full error: ${JSON.stringify(error)}`);
              }
            }

            // 1. Set Priority
            let priorityOptionIdToSet;
            let priorityLabelFound;
            if (issueLabels.includes("high priority")) {
              priorityOptionIdToSet = optionNodeIds.priority.high;
              priorityLabelFound = "high priority";
            } else if (issueLabels.includes("medium priority")) {
              priorityOptionIdToSet = optionNodeIds.priority.medium;
              priorityLabelFound = "medium priority";
            } else if (issueLabels.includes("low priority")) {
              priorityOptionIdToSet = optionNodeIds.priority.low;
              priorityLabelFound = "low priority";
            }

            if (priorityOptionIdToSet) {
              if (priorityOptionIdToSet.startsWith("OPTION_ID_")) {
                core.warning(`Priority Option ID for label '${priorityLabelFound}' is a placeholder: '${priorityOptionIdToSet}'. Please replace it with the actual GraphQL Node ID.`);
              } else {
                await updateProjectV2ItemField({
                  projectId, itemId, fieldId: fieldNodeIds.priority,
                  value: { singleSelectOptionId: priorityOptionIdToSet },
                  fieldName: "Priority"
                });
              }
            }

            // 2. Set Module
            const moduleLabelMapping = {
              "ai-ml": optionNodeIds.module["ai-ml"],
              "airlock": optionNodeIds.module.airlock,
              "control-systems": optionNodeIds.module["control-systems"],
              "documentation": optionNodeIds.module.documentation,
              "embedded": optionNodeIds.module.embedded,
              "equipment-panel": optionNodeIds.module["equipment-panel"],
              "navigation": optionNodeIds.module.navigation,
              "perception": optionNodeIds.module.perception,
              "simulation": optionNodeIds.module.simulation
            };
            for (const label of issueLabels) {
              if (moduleLabelMapping[label]) {
                const moduleOptionIdToSet = moduleLabelMapping[label];
                if (moduleOptionIdToSet.startsWith("OPTION_ID_")) {
                  core.warning(`Module Option ID for label '${label}' is a placeholder: '${moduleOptionIdToSet}'. Please replace it with the actual GraphQL Node ID.`);
                } else {
                  await updateProjectV2ItemField({
                    projectId, itemId, fieldId: fieldNodeIds.module,
                    value: { singleSelectOptionId: moduleOptionIdToSet },
                    fieldName: "Module"
                  });
                  core.info(`Set Module based on label: ${label}`);
                  break; 
                }
              }
            }

            // 3. Set Challenge
            const challengeLabelMapping = {
              "connectivity-test": optionNodeIds.challenge["Connectivity Test"],
              "payload-test": optionNodeIds.challenge["Payload Test"],
              "challenge-1": optionNodeIds.challenge["Challenge 1"],
              "challenge-2": optionNodeIds.challenge["Challenge 2"]
            };
            let challengeSet = false;
            for (const label of issueLabels) {
              if (challengeLabelMapping[label]) {
                const challengeOptionIdToSet = challengeLabelMapping[label];
                if (challengeOptionIdToSet.startsWith("OPTION_ID_")) {
                  core.warning(`Challenge Option ID for label '${label}' is a placeholder: '${challengeOptionIdToSet}'. Please replace it with the actual GraphQL Node ID.`);
                } else {
                  await updateProjectV2ItemField({
                    projectId, itemId, fieldId: fieldNodeIds.challenge,
                    value: { singleSelectOptionId: challengeOptionIdToSet },
                    fieldName: "Challenge"
                  });
                  core.info(`Set Challenge based on label: ${label}`);
                  challengeSet = true;
                  break; 
                }
              }
            }
            if (!challengeSet) {
              const overallProjectOptionId = optionNodeIds.challenge["Overall Project"];
              if (overallProjectOptionId) {
                if (overallProjectOptionId.startsWith("OPTION_ID_")) {
                  core.warning(`Default Challenge Option ID ('Overall Project') is a placeholder: '${overallProjectOptionId}'. Please replace it with the actual GraphQL Node ID.`);
                } else {
                  await updateProjectV2ItemField({
                    projectId, itemId, fieldId: fieldNodeIds.challenge,
                    value: { singleSelectOptionId: overallProjectOptionId },
                    fieldName: "Challenge"
                  });
                  core.info("Set Challenge to 'Overall Project' as no specific challenge label was found.");
                }
              } else {
                core.info("No specific challenge label found and no Option ID for 'Overall Project' configured or found as placeholder.");
              }
            }

            // 4. Set Due Date
            if (dueDate && fieldNodeIds.dueDate) {
              await updateProjectV2ItemField({
                projectId, itemId, fieldId: fieldNodeIds.dueDate,
                value: { date: dueDate },
                fieldName: "Due Date"
              });
              core.info(`Set Due Date to: ${dueDate}`);
            } else {
              core.info("Due date or Due Date Field ID not available, skipping due date update.");
            }

  # notify-members:
  #   name: Notify organization members
  #   runs-on: ubuntu-latest
  #   if: github.event.action == 'opened' # Only notify on new issues, not reopened
  #   steps:
  #     - name: Add notification comment
  #       uses: actions/github-script@v6
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const { issue } = context.payload;
  #           const creator = issue.user.login;

  #           // You can customize this message as needed
  #           const message = `@NSpaceTeam/members A new issue has been created by @${creator}:\n\n` +
  #                          `**${issue.title}**\n\n` +
  #                          `${issue.body?.substring(0, 200)}${issue.body?.length > 200 ? '...' : ''}\n\n` +
  #                          `[View the full issue](${issue.html_url})`;

  #           await github.rest.issues.createComment({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             issue_number: issue.number,
  #             body: message
  #           });
