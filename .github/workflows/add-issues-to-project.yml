name: Add Issues to Project and Notify Members

on:
  issues:
    types:
      - opened
      - reopened
jobs:
  add-to-project:
    name: Add issue to project
    runs-on: ubuntu-latest
    steps:
      - name: Calculate Due Date
        id: calculate_due_date
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const createdAt = new Date(context.payload.issue.created_at);
            const dueDate = new Date(createdAt);
            dueDate.setDate(createdAt.getDate() + 14);
            const year = dueDate.getFullYear();
            const month = String(dueDate.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed
            const day = String(dueDate.getDate()).padStart(2, '0');
            const formattedDueDate = `${year}-${month}-${day}`;
            core.setOutput("due_date", formattedDueDate);
      - name: Add to NSpace ERC Project
        id: add_issue_to_project_step # Added ID for referencing output (itemId)
        uses: actions/add-to-project@v1.0.2 # Use the latest version
        with:
          project-url: "https://github.com/orgs/NSpaceTeam/projects/4"
          github-token: ${{ secrets.NSPACE_PROJECT_AUTOMATION }} # PAT with project scope
      - name: Get Project ID
        id: get_project_id
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.NSPACE_PROJECT_AUTOMATION }}
          result-encoding: string # Ensure the output is a string
          script: |
            const projectUrl = "https://github.com/orgs/NSpaceTeam/projects/4";
            const parts = projectUrl.split('/');
            // Expected URL: "https://github.com/orgs/NSpaceTeam/projects/4"
            // parts: ["https:", "", "github.com", "orgs", "NSpaceTeam", "projects", "4"]
            if (parts.length < 7 || parts[3] !== 'orgs' || parts[5] !== 'projects') {
              core.setFailed(`Could not parse organization and project number from URL using split: ${projectUrl}. Parts: ${parts.join(', ')}`);
              return;
            }
            const orgLogin = parts[4];
            const projectNumber = parseInt(parts[6], 10);

            if (!orgLogin || isNaN(projectNumber)) {
              core.setFailed(`Parsed invalid orgLogin or projectNumber. Org: '${orgLogin}', Proj#: '${parts[6]}' from URL: ${projectUrl}`);
              return;
            }

            core.info(`Fetching Project ID for org: ${orgLogin}, project number: ${projectNumber}`);

            const query = `query($orgLogin: String!, $projectNumber: Int!) {
              organization(login: $orgLogin) {
                projectV2(number: $projectNumber) {
                  id
                }
              }
            }`;
            const variables = { orgLogin, projectNumber };

            try {
              const result = await github.graphql(query, variables);
              const projectId = result.organization.projectV2.id;
              if (!projectId) {
                core.setFailed(`Could not retrieve project ID. GraphQL result: ${JSON.stringify(result)}`);
                return;
              }
              core.info(`Retrieved Project ID: ${projectId}`);
              core.setOutput("projectId", projectId);
            } catch (error) {
              core.setFailed(`Error fetching project ID: ${error.message}`);
              // Re-throw the error to ensure the workflow step fails
              throw error;
            }
      - name: Set Default Project Fields
        id: set_default_fields
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.NSPACE_PROJECT_AUTOMATION }}
          script: |
            const itemId = "${{ steps.add_issue_to_project_step.outputs.itemId }}";
            const projectId = "${{ steps.get_project_id.outputs.projectId }}";
            const calculatedDueDate = "${{ steps.calculate_due_date.outputs.due_date }}";

            core.info(`[DefaultSetter] Starting default field setting for item ID: ${itemId}, project ID: ${projectId}`);

            if (!itemId || !projectId) {
              core.warning("[DefaultSetter] Item ID or Project ID is missing. Skipping default field setting.");
              return;
            }

            const fieldNodeIds = {
              priority: "PVTSSF_lADODIbpr84A4kaJzgtg82I",
              challenge: "PVTSSF_lADODIbpr84A4kaJzgtg9hg",
              sizeEffort: "PVTSSF_lADODIbpr84A4kaJzgtg9pw", // From user's file comment
              dueDate: "PVTF_lADODIbpr84A4kaJzgtg9rw"
            };

            // !!! IMPORTANT: User needs to replace placeholder Option IDs if any !!!
            const optionNodeIds = {
              priority: {
                medium: "c02548bb"
              },
              challenge: {
                "Overall Project": "5bcb98b2"
              },
              sizeEffort: {
                "S (1-2d)": "0127b4bc" // User needs to provide this
              }
            };

            async function updateProjectV2ItemFieldDefault(input) {
              const { projectId, itemId, fieldId, value, fieldName } = input;
              core.info(`[DefaultSetter] Attempting to update item '${itemId}', field '${fieldName}' (${fieldId}) with default value ${JSON.stringify(value)}`);
              try {
                await github.graphql(
                  `mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: $value
                    }) {
                      projectV2Item { id }
                    }
                  }`,
                  { projectId, itemId, fieldId, value }
                );
                core.info(`[DefaultSetter] Successfully updated field '${fieldName}' (${fieldId}) for item '${itemId}'.`);
              } catch (error) {
                core.error(`[DefaultSetter] Error updating field '${fieldName}' (${fieldId}) for item '${itemId}': ${error.message}`);
                // Do not re-throw, allow other defaults to be attempted.
              }
            }

            const GET_ITEM_FIELDS_QUERY = `
              query($itemId: ID!) {
                node(id: $itemId) {
                  ... on ProjectV2Item {
                    id
                    priority: fieldValueByName(name: "Priority") {
                      ... on ProjectV2ItemFieldSingleSelectValue { optionId }
                    }
                    challenge: fieldValueByName(name: "Challenge") {
                      ... on ProjectV2ItemFieldSingleSelectValue { optionId }
                    }
                    sizeEffort: fieldValueByName(name: "Size/Effort") {
                      ... on ProjectV2ItemFieldSingleSelectValue { optionId }
                    }
                    dueDate: fieldValueByName(name: "Due Date") {
                      ... on ProjectV2ItemFieldDateValue { date }
                    }
                  }
                }
              }`;

            try {
              core.info(`[DefaultSetter] Fetching current field values for item ID: ${itemId}`);
              const currentFieldsResult = await github.graphql(GET_ITEM_FIELDS_QUERY, { itemId });

              if (!currentFieldsResult || !currentFieldsResult.node) {
                core.warning(`[DefaultSetter] Could not fetch current fields for item ${itemId}. Result: ${JSON.stringify(currentFieldsResult)}`);
                return;
              }

              const itemData = currentFieldsResult.node;
              core.info(`[DefaultSetter] Current item data before defaults: ${JSON.stringify(itemData)}`);

              // 1. Default Priority if not set
              const currentPriority = itemData.priority;
              if (!currentPriority || !currentPriority.optionId) {
                core.info("[DefaultSetter] Priority field is not set. Setting to default 'medium'.");
                await updateProjectV2ItemFieldDefault({
                  projectId, itemId, fieldId: fieldNodeIds.priority,
                  value: { singleSelectOptionId: optionNodeIds.priority.medium },
                  fieldName: "Priority"
                });
              } else {
                core.info(`[DefaultSetter] Priority field already has a value. No default needed.`);
              }

              // 2. Default Challenge if not set
              const currentChallenge = itemData.challenge;
              if (!currentChallenge || !currentChallenge.optionId) {
                core.info("[DefaultSetter] Challenge field is not set. Setting to default 'Overall Project'.");
                await updateProjectV2ItemFieldDefault({
                  projectId, itemId, fieldId: fieldNodeIds.challenge,
                  value: { singleSelectOptionId: optionNodeIds.challenge["Overall Project"] },
                  fieldName: "Challenge"
                });
              } else {
                core.info(`[DefaultSetter] Challenge field already has a value. No default needed.`);
              }

              // 3. Default Size/Effort if not set
              const currentSizeEffort = itemData.sizeEffort;
              const defaultSizeOptionId = optionNodeIds.sizeEffort["S (1-2d)"];
              if (!currentSizeEffort || !currentSizeEffort.optionId) {
                if (defaultSizeOptionId === "OPTION_ID_FOR_SIZE_S") {
                  core.warning("[DefaultSetter] Size/Effort field is not set, but Option ID for 'S (1-2d)' is a placeholder 'OPTION_ID_FOR_SIZE_S'. Please update it in the workflow.");
                } else {
                  core.info("[DefaultSetter] Size/Effort field is not set. Setting to default 'S (1-2d)'.");
                  await updateProjectV2ItemFieldDefault({
                    projectId, itemId, fieldId: fieldNodeIds.sizeEffort,
                    value: { singleSelectOptionId: defaultSizeOptionId },
                    fieldName: "Size/Effort"
                  });
                }
              } else {
                core.info(`[DefaultSetter] Size/Effort field already has a value. No default needed.`);
              }

              // 4. Default Due Date if not set and calculatedDueDate is available
              const currentDueDate = itemData.dueDate;
              if ((!currentDueDate || !currentDueDate.date) && calculatedDueDate) {
                core.info(`[DefaultSetter] Due Date field is not set. Setting to calculated default: ${calculatedDueDate}.`);
                await updateProjectV2ItemFieldDefault({
                  projectId, itemId, fieldId: fieldNodeIds.dueDate,
                  value: { date: calculatedDueDate },
                  fieldName: "Due Date"
                });
              } else if (calculatedDueDate) {
                core.info(`[DefaultSetter] Due Date field already has a value. No default needed (or calculated date was missing).`);
              } else {
                 core.info(`[DefaultSetter] Calculated Due Date is not available. Skipping default Due Date setting.`);
              }

            } catch (error) {
              core.error(`[DefaultSetter] Error during default setting script execution: ${error.message}`);
              core.setFailed(`[DefaultSetter] Error: ${error.message}`);
            }
      - name: Set Project Fields from Labels and Due Date
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.NSPACE_PROJECT_AUTOMATION }}
          script: |
            const itemId = "${{ steps.add_issue_to_project_step.outputs.itemId }}";
            const projectId = "${{ steps.get_project_id.outputs.projectId }}"; // Use output from the new step
            const issueLabels = context.payload.issue.labels.map(label => label.name.toLowerCase());
            const dueDate = "${{ steps.calculate_due_date.outputs.due_date }}";

            core.info(`Project ID: ${projectId}`);
            core.info(`Item ID: ${itemId}`);
            core.info(`Issue Labels: ${issueLabels.join(', ')}`);
            core.info(`Due Date: ${dueDate}`);

            if (!projectId || !itemId) {
              core.setFailed("Project ID or Item ID is missing. Ensure 'add_issue_to_project_step' ran successfully and outputted them.");
              return;
            }

            const fieldNodeIds = {
              priority: "PVTSSF_lADODIbpr84A4kaJzgtg82I",
              module: "PVTSSF_lADODIbpr84A4kaJzgtg9Uc",
              challenge: "PVTSSF_lADODIbpr84A4kaJzgtg9hg",
              dueDate: "PVTF_lADODIbpr84A4kaJzgtg9rw",
              team: "PVTSSF_lADODIbpr84A4kaJzgtms0w"
              // Size/Effort: "PVTSSF_lADODIbpr84A4kaJzgtg9pw" // Not used as no labels map to it yet
            };

            const optionNodeIds = {
              priority: {
                "low": "b653cff7",        // e.g., PVTSSO_............................
                "medium": "c02548bb",  // e.g., PVTSSO_............................
                "high": "50f8fda7"       // e.g., PVTSSO_............................
              },
              module: {
                "ai-ml": "7a5cb45e",
                "control-systems": "e3ee966d",
                "embedded": "9a234a88",
                "navigation": "9864b4b7",
                "perception": "eeb738a6",
                "simulation": "aa0149a2",
                "airlock": "d35e65ba",
                "equipment-panel": "65c72123",
                "documentation": "ffbc7c98"
              },
              challenge: {
                "Overall Project": "5bcb98b2",
                "Connectivity Test": "7c32bfbf",
                "Payload Test": "ecac1de9",
                "Challenge 1": "7b17317c",
                "Challenge 2": "92d04f4f"
              },
              team: {
                "Software Team": "3d71e2bd",
                "Embedded Team": "3679dfab",
                "Design/Marketing Team": "85dca314",
                "Website Team": "70ff8c93"
                }
            };

            async function updateProjectV2ItemField(input) {
              const { projectId, itemId, fieldId, value, fieldName } = input;
              core.info(`Attempting to update item '${itemId}', field '${fieldName}' (${fieldId}) in project '${projectId}' with value ${JSON.stringify(value)}`);
              try {
                await github.graphql(
                  `mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: $value
                    }) {
                      projectV2Item { id }
                    }
                  }`,
                  { projectId, itemId, fieldId, value }
                );
                core.info(`Successfully updated field '${fieldName}' (${fieldId}) for item '${itemId}'.`);
              } catch (error) {
                core.error(`Error updating field '${fieldName}' (${fieldId}) for item '${itemId}': ${error.message}`);
                core.error(`Full error: ${JSON.stringify(error)}`);
              }
            }

            // 1. Set Priority
            let priorityOptionIdToSet;
            let priorityLabelFound;
            if (issueLabels.includes("high priority")) {
              priorityOptionIdToSet = optionNodeIds.priority.high;
              priorityLabelFound = "high priority";
            } else if (issueLabels.includes("medium priority")) {
              priorityOptionIdToSet = optionNodeIds.priority.medium;
              priorityLabelFound = "medium priority";
            } else if (issueLabels.includes("low priority")) {
              priorityOptionIdToSet = optionNodeIds.priority.low;
              priorityLabelFound = "low priority";
            }

            if (priorityOptionIdToSet) {
              if (priorityOptionIdToSet.startsWith("OPTION_ID_")) {
                core.warning(`Priority Option ID for label '${priorityLabelFound}' is a placeholder: '${priorityOptionIdToSet}'. Please replace it with the actual GraphQL Node ID.`);
              } else {
                await updateProjectV2ItemField({
                  projectId, itemId, fieldId: fieldNodeIds.priority,
                  value: { singleSelectOptionId: priorityOptionIdToSet },
                  fieldName: "Priority"
                });
              }
            }

            // 2. Set Module
            const moduleLabelMapping = {
              "ai-ml": optionNodeIds.module["ai-ml"],
              "airlock": optionNodeIds.module.airlock,
              "control-systems": optionNodeIds.module["control-systems"],
              "documentation": optionNodeIds.module.documentation,
              "embedded": optionNodeIds.module.embedded,
              "equipment-panel": optionNodeIds.module["equipment-panel"],
              "navigation": optionNodeIds.module.navigation,
              "perception": optionNodeIds.module.perception,
              "simulation": optionNodeIds.module.simulation
            };
            for (const label of issueLabels) {
              if (moduleLabelMapping[label]) {
                const moduleOptionIdToSet = moduleLabelMapping[label];
                if (moduleOptionIdToSet.startsWith("OPTION_ID_")) {
                  core.warning(`Module Option ID for label '${label}' is a placeholder: '${moduleOptionIdToSet}'. Please replace it with the actual GraphQL Node ID.`);
                } else {
                  await updateProjectV2ItemField({
                    projectId, itemId, fieldId: fieldNodeIds.module,
                    value: { singleSelectOptionId: moduleOptionIdToSet },
                    fieldName: "Module"
                  });
                  core.info(`Set Module based on label: ${label}`);
                  break; 
                }
              }
            }

            // 3. Set Challenge
            const challengeLabelMapping = {
              "connectivity-test": optionNodeIds.challenge["Connectivity Test"],
              "payload-test": optionNodeIds.challenge["Payload Test"],
              "challenge-1": optionNodeIds.challenge["Challenge 1"],
              "challenge-2": optionNodeIds.challenge["Challenge 2"]
            };
            let challengeSet = false;
            for (const label of issueLabels) {
              if (challengeLabelMapping[label]) {
                const challengeOptionIdToSet = challengeLabelMapping[label];
                if (challengeOptionIdToSet.startsWith("OPTION_ID_")) {
                  core.warning(`Challenge Option ID for label '${label}' is a placeholder: '${challengeOptionIdToSet}'. Please replace it with the actual GraphQL Node ID.`);
                } else {
                  await updateProjectV2ItemField({
                    projectId, itemId, fieldId: fieldNodeIds.challenge,
                    value: { singleSelectOptionId: challengeOptionIdToSet },
                    fieldName: "Challenge"
                  });
                  core.info(`Set Challenge based on label: ${label}`);
                  challengeSet = true;
                  break; 
                }
              }
            }
            if (!challengeSet) {
              const overallProjectOptionId = optionNodeIds.challenge["Overall Project"];
              if (overallProjectOptionId) {
                if (overallProjectOptionId.startsWith("OPTION_ID_")) {
                  core.warning(`Default Challenge Option ID ('Overall Project') is a placeholder: '${overallProjectOptionId}'. Please replace it with the actual GraphQL Node ID.`);
                } else {
                  await updateProjectV2ItemField({
                    projectId, itemId, fieldId: fieldNodeIds.challenge,
                    value: { singleSelectOptionId: overallProjectOptionId },
                    fieldName: "Challenge"
                  });
                  core.info("Set Challenge to 'Overall Project' as no specific challenge label was found.");
                }
              } else {
                core.info("No specific challenge label found and no Option ID for 'Overall Project' configured or found as placeholder.");
              }
            }

            // 4. Set Due Date
            if (dueDate && fieldNodeIds.dueDate) {
              await updateProjectV2ItemField({
                projectId, itemId, fieldId: fieldNodeIds.dueDate,
                value: { date: dueDate },
                fieldName: "Due Date"
              });
              core.info(`Set Due Date to: ${dueDate}`);
            } else {
              core.info("Due date or Due Date Field ID not available, skipping due date update.");
            }

            // 5. Set Team
            const teamLabelMapping = {
              "software-team": optionNodeIds.team["Software Team"],
              "embedded-team": optionNodeIds.team["Embedded Team"],
              "design-marketing-team": optionNodeIds.team["Design/Marketing Team"],
              "website-team": optionNodeIds.team["Website Team"]
            };

            for (const label of issueLabels) {
              if (teamLabelMapping[label]) {
                const teamOptionIdToSet = teamLabelMapping[label];
                if (teamOptionIdToSet.startsWith("OPTION_ID_")) { // Should not happen if user updated IDs
                  core.warning(`Team Option ID for label '${label}' is a placeholder: '${teamOptionIdToSet}'. Please replace it with the actual GraphQL Node ID.`);
                } else {
                  await updateProjectV2ItemField({
                    projectId,
                    itemId,
                    fieldId: fieldNodeIds.team,
                    value: { singleSelectOptionId: teamOptionIdToSet },
                    fieldName: "Team"
                  });
                  core.info(`Set Team based on label: ${label}`);
                  break; // Assuming an issue is assigned to only one team
                }
              }
            }

  ## NOTIFICATIONS ON ISSUE CREATION DISABLED TO AVOID SPAM

  # notify-members:
  #   name: Notify organization members
  #   runs-on: ubuntu-latest
  #   if: github.event.action == 'opened' # Only notify on new issues, not reopened
  #   steps:
  #     - name: Add notification comment
  #       uses: actions/github-script@v7.0.1
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const { issue } = context.payload;
  #           const creator = issue.user.login;

  #           // You can customize this message as needed
  #           const message = `@NSpaceTeam/members A new issue has been created by @${creator}:\n\n` +
  #                          `**${issue.title}**\n\n` +
  #                          `${issue.body?.substring(0, 200)}${issue.body?.length > 200 ? '...' : ''}\n\n` +
  #                          `[View the full issue](${issue.html_url})`;

  #           await github.rest.issues.createComment({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             issue_number: issue.number,
  #             body: message
  #           });
